[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "repo_review"
authors = [
  { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
description = "Framework that can run checks on repos"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Environment :: WebAssembly :: Emscripten",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
  "markdown-it-py",
  "pyyaml",
  "tomli; python_version < '3.11'",
  "typing-extensions; python_version < '3.11'",
]

[project.urls]
Changelog = "https://github.com/scientific-python/repo-review/releases"
Demo = "https://scientific-python.github.io/repo-review"
Documentation = "https://repo-review.readthedocs.io"
Homepage = "https://repo-review.readthedocs.io"
Source = "https://github.com/scientific-python/repo-review"

[project.scripts]
repo-review = "repo_review.__main__:main"

[project.entry-points."repo_review.fixtures"]
pyproject = "repo_review.fixtures:pyproject"
list_all = "repo_review.fixtures:list_all"

[project.entry-points."validate_pyproject.tool_schema"]
repo-review = "repo_review.schema:get_schema"

[project.optional-dependencies]
cli = [
  "click >=8",
  "rich >=12.2",
  "rich-click",
]

[dependency-groups]
test = [
  "pytest >=7",
  "sp-repo-review >=2025.01.22",
  "validate-pyproject >=0.14",
]
cov = [
  { include-group = "test" },
  "pytest-cov",
]
dev = [
  { include-group = "cov" },
  "sp-repo-review[cli]",
  "validate-pyproject-schema-store[all]",
]
docs = [
  "furo",
  "myst_parser >=0.13",
  "repo-review[cli]",
  "sphinx >=4.0",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
  "sphinxcontrib-programoutput",
  "sphinxext-opengraph",
  "sphinx-github-changelog",
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/repo_review/_version.py"

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.hatch-test]
features = ["cli"]
# duplicated since hatch doesn't support groups yet
dependencies = [
  "pytest >=7",
  "sp-repo-review >=2025.01.22",
  "validate-pyproject >=0.14",
]
env-vars.PYTHONWARNDEFAULTENCODING = "1"

[tool.hatch.envs.lint]
dependencies = ["pre-commit"]
skip-install = true
scripts.lint = "pre-commit run --all-files --show-diff-on-failure {args}"

[tool.hatch.envs.pylint]
features = ["cli"]
dependencies = ["pylint>=3.2"]
scripts.lint = "pylint repo_review {args}"

[tool.hatch.envs.docs]
# duplicated since hatch doesn't support groups yet
dependencies = [
  "furo",
  "myst_parser >=0.13",
  "repo-review[cli]",
  "sphinx >=4.0",
  "sphinx-autodoc-typehints",
  "sphinx-copybutton",
  "sphinxcontrib-programoutput",
  "sphinxext-opengraph",
  "sphinx-github-changelog",
  "sphinx-autobuild",
]
scripts.linkcheck = "sphinx-build -b=linkcheck docs docs/_build/linkcheck {args}"
scripts.html = "sphinx-build --keep-going -n -T -b=html docs docs/_build/html {args}"
scripts.serve = "sphinx-autobuild -n -T -b=html docs docs/_build/html {args}"
scripts.man = "sphinx-build --keep-going -n -T -b=man docs docs/_build/man {args}"

[tool.hatch.envs.api-docs]
skip-install = true
dependencies = ["sphinx"]
scripts.build = "sphinx-apidoc -o docs/api/ --module-first --no-toc --force src/repo_review"

[tool.hatch.envs.example]
features = ["cli"]
post-install-commands = ["$HATCH_UV pip install -e tests/test_utilities"]

[tool.hatch.envs.webapp]
skip-install = true
scripts.serve = "cd docs && echo 'Serving on http://localhost:8080' && python -m http.server 8080"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.14", "3.13", "3.12", "3.11", "3.10"]


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config", "--import-mode=importlib"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
  "error",
  "ignore:OptionHighlighter:DeprecationWarning",  # rich-click triggers its own warning
  "ignore:`highlighter`:DeprecationWarning",  # rich-click triggers its own warning
]
testpaths = ["tests"]
pythonpath = ["tests/test_utilities"]


[tool.mypy]
mypy_path = ["src"]
files = ["src", "web", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "repo_review.*"
disallow_untyped_defs = true


[tool.pylint]
py-version = "3.10"
ignore-paths = ["src/repo_review/_version.py"]
ignored-modules = ["pyodide"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "wrong-import-position",
  "redefined-builtin",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "invalid-name",
  "redefined-outer-name",
  "no-member",  # better handled by mypy, etc.
  "used-before-assignment",  # False positive on conditional import
  "unnecessary-ellipsis",  # Not correct for typing
  "import-outside-toplevel",  # better handled elsewhere
  "duplicate-code", # Triggers incorrectly
]


[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "TID251",      # flake8-tidy-imports.banned-api
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "ISC001",  # May collide with formatter
  "PLR09",   # Too many X
  "PLR2004", # Magic value in comparison
]
typing-modules = ["repo_review._compat.typing"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.assert_never".msg = "Use repo_review._compat.typing.assert_never instead."
"importlib.abc".msg = "Use repo_review._compat.importlib.resources.abc instead."
"importlib.resources.abc".msg = "Use repo_review._compat.importlib.resources.abc instead."

[tool.ruff.lint.per-file-ignores]
"src/repo_review/_compat/**.py" = ["TID251"]
"src/**/__main__.py" = ["T20"]

[tool.coverage]
report.exclude_also = [
  "def __dir__()",
  "if TYPE_CHECKING:",
  '\.\.\.',
]
report.show_missing = true
report.skip_empty = true
